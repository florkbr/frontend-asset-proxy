# Caddyfile for S3 Reverse Proxy with 'data/' Path Structure

# Global options block.
{
	{$CADDY_TLS_MODE}
	auto_https disable_redirects
	debug
}

# Define the HTTP server
:{$SERVER_PORT:8080} {
	{$CADDY_TLS_CERT}
	log {
		output stderr
		level DEBUG
	}

	# Health check endpoint
	handle /healthz {
		respond "OK" 200
	}

	# serve out /manifests/* with bucket path BUCKET_PATH_PREFIX
	handle /manifests/* {
		rewrite * /{$BUCKET_PATH_PREFIX}{http.request.uri.path}

		reverse_proxy {$SIGV4_PROXY_URL:http://aws-sigv4-proxy:8081} {
			header_up Host {http.reverse_proxy.upstream.hostport}
		}
	}

	# Main request handling.
	# If incoming request is /apps/app_name/filepath.ext
	# it will be rewritten to BUCKET_PATH_PREFIX/data/app_name/filepath.ext
	# hande_paths strips /apps from uri.path
	handle_path /apps/* {
		# Strip /apps prefix and prepend BUCKET_PATH_PREFIX/data
		rewrite * /{$BUCKET_PATH_PREFIX}/data{http.request.uri.path}

		reverse_proxy {$SIGV4_PROXY_URL:http://aws-sigv4-proxy:8081} {
			header_up Host {http.reverse_proxy.upstream.hostport}
		}
	}

	# Fallback for requests not starting with /apps
	handle {
		# Prepend BUCKET_PATH_PREFIX/data to the incoming request URI path
		rewrite * /{$BUCKET_PATH_PREFIX}/data{http.request.uri.path}

		reverse_proxy {$SIGV4_PROXY_URL:http://aws-sigv4-proxy:8081} {
			header_up Host {http.reverse_proxy.upstream.hostport}
		}
	}

	# Handle errors from the above proxy attempt (e.g., for SPA routes)
	handle_errors {
		@spa_fallback expression {http.error.status_code} == 403 || {http.error.status_code} == 404
		handle @spa_fallback {
			# Rewrite to the SPA entry point, assuming it's also under the 'data' prefix in S3.
			# e.g., if SPA_ENTRYPOINT_PATH is /index.html, this becomes /frontend-assets/data/index.html
			rewrite * /{$BUCKET_PATH_PREFIX}/data{$SPA_ENTRYPOINT_PATH:/index.html}

			reverse_proxy {$SIGV4_PROXY_URL:http://aws-sigv4-proxy:8081} {
				header_up Host {http.reverse_proxy.upstream.hostport}
			}
		}
		# For other errors not handled by SPA fallback
		respond "{http.error.status_code} {http.error.status_text}" {
			close
		}
	}
}
